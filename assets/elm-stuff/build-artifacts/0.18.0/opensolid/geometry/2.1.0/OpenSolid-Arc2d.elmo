var _opensolid$geometry$OpenSolid_Arc2d$sweptAngle = function (_p0) {
	var _p1 = _p0;
	return _p1._0.sweptAngle;
};
var _opensolid$geometry$OpenSolid_Arc2d$startPoint = function (_p2) {
	var _p3 = _p2;
	return _p3._0.startPoint;
};
var _opensolid$geometry$OpenSolid_Arc2d$centerPoint = function (_p4) {
	var _p5 = _p4;
	return _p5._0.centerPoint;
};
var _opensolid$geometry$OpenSolid_Arc2d$radius = function (arc) {
	return A2(
		_opensolid$geometry$OpenSolid_Point2d$distanceFrom,
		_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc),
		_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc));
};
var _opensolid$geometry$OpenSolid_Arc2d$numApproximationSegments = F2(
	function (tolerance, arc) {
		if ((_elm_lang$core$Native_Utils.cmp(0, tolerance) < 0) && (_elm_lang$core$Native_Utils.cmp(
			tolerance,
			_opensolid$geometry$OpenSolid_Arc2d$radius(arc)) < 0)) {
			var maxSegmentAngle = _elm_lang$core$Basics$sqrt(
				(8 * tolerance) / _opensolid$geometry$OpenSolid_Arc2d$radius(arc));
			return _elm_lang$core$Basics$ceiling(
				_elm_lang$core$Basics$abs(
					_opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc)) / maxSegmentAngle);
		} else {
			return 1;
		}
	});
var _opensolid$geometry$OpenSolid_Arc2d$endPoint = function (arc) {
	return A3(
		_opensolid$geometry$OpenSolid_Point2d$rotateAround,
		_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc),
		_opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc),
		_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc));
};
var _opensolid$geometry$OpenSolid_Arc2d$pointOn = F2(
	function (arc, parameter) {
		var angle = parameter * _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc);
		return A3(
			_opensolid$geometry$OpenSolid_Point2d$rotateAround,
			_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc),
			angle,
			_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc));
	});
var _opensolid$geometry$OpenSolid_Arc2d$toPolyline = F2(
	function (tolerance, arc) {
		var numSegments = A2(_opensolid$geometry$OpenSolid_Arc2d$numApproximationSegments, tolerance, arc);
		var point = function (index) {
			return A2(
				_opensolid$geometry$OpenSolid_Arc2d$pointOn,
				arc,
				_elm_lang$core$Basics$toFloat(index) / _elm_lang$core$Basics$toFloat(numSegments));
		};
		var points = A2(
			_elm_lang$core$List$map,
			point,
			A2(_elm_lang$core$List$range, 0, numSegments));
		return _opensolid$geometry$OpenSolid_Polyline2d$fromVertices(points);
	});
var _opensolid$geometry$OpenSolid_Arc2d$derivative = F2(
	function (arc, parameter) {
		var startDerivative = A2(
			_opensolid$geometry$OpenSolid_Vector2d$scaleBy,
			_opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc),
			_opensolid$geometry$OpenSolid_Vector2d$perpendicularTo(
				A2(
					_opensolid$geometry$OpenSolid_Vector2d$from,
					_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc),
					_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc))));
		var angle = parameter * _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc);
		return A2(_opensolid$geometry$OpenSolid_Vector2d$rotateBy, angle, startDerivative);
	});
var _opensolid$geometry$OpenSolid_Arc2d$evaluate = function (arc) {
	var _p6 = A2(
		_opensolid$geometry$OpenSolid_Direction2d$from,
		_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc),
		_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc));
	if (_p6.ctor === 'Just') {
		var arcSweptAngle = _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc);
		var arcRadius = _opensolid$geometry$OpenSolid_Arc2d$radius(arc);
		var derivativeMagnitude = arcRadius * arcSweptAngle;
		var _p7 = _opensolid$geometry$OpenSolid_Point2d$coordinates(
			_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc));
		var centerX = _p7._0;
		var centerY = _p7._1;
		var startAngle = _opensolid$geometry$OpenSolid_Direction2d$angle(_p6._0);
		return function (t) {
			var angle = startAngle + (t * arcSweptAngle);
			var cosAngle = _elm_lang$core$Basics$cos(angle);
			var sinAngle = _elm_lang$core$Basics$sin(angle);
			return {
				ctor: '_Tuple2',
				_0: _opensolid$geometry$OpenSolid_Point2d$fromCoordinates(
					{ctor: '_Tuple2', _0: centerX + (arcRadius * cosAngle), _1: centerY + (arcRadius * sinAngle)}),
				_1: _opensolid$geometry$OpenSolid_Vector2d$fromComponents(
					{ctor: '_Tuple2', _0: (0 - derivativeMagnitude) * sinAngle, _1: derivativeMagnitude * cosAngle})
			};
		};
	} else {
		return _elm_lang$core$Basics$always(
			{
				ctor: '_Tuple2',
				_0: _opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc),
				_1: _opensolid$geometry$OpenSolid_Vector2d$zero
			});
	}
};
var _opensolid$geometry$OpenSolid_Arc2d$with = _opensolid$geometry$OpenSolid_Geometry_Internal$Arc2d;
var _opensolid$geometry$OpenSolid_Arc2d$throughPoints = function (points) {
	return A2(
		_elm_lang$core$Maybe$andThen,
		function (centerPoint) {
			var _p8 = points;
			var firstPoint = _p8._0;
			var secondPoint = _p8._1;
			var thirdPoint = _p8._2;
			var firstVector = A2(_opensolid$geometry$OpenSolid_Vector2d$from, centerPoint, firstPoint);
			var secondVector = A2(_opensolid$geometry$OpenSolid_Vector2d$from, centerPoint, secondPoint);
			var thirdVector = A2(_opensolid$geometry$OpenSolid_Vector2d$from, centerPoint, thirdPoint);
			return A4(
				_elm_lang$core$Maybe$map3,
				F3(
					function (firstDirection, secondDirection, thirdDirection) {
						var full = A2(_opensolid$geometry$OpenSolid_Direction2d$angleFrom, firstDirection, thirdDirection);
						var partial = A2(_opensolid$geometry$OpenSolid_Direction2d$angleFrom, firstDirection, secondDirection);
						var sweptAngle = ((_elm_lang$core$Native_Utils.cmp(partial, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(full, partial) > -1)) ? full : (((_elm_lang$core$Native_Utils.cmp(partial, 0) < 1) && (_elm_lang$core$Native_Utils.cmp(full, partial) < 1)) ? full : ((_elm_lang$core$Native_Utils.cmp(full, 0) > -1) ? (full - (2 * _elm_lang$core$Basics$pi)) : (full + (2 * _elm_lang$core$Basics$pi))));
						return _opensolid$geometry$OpenSolid_Arc2d$with(
							{centerPoint: centerPoint, startPoint: firstPoint, sweptAngle: sweptAngle});
					}),
				_opensolid$geometry$OpenSolid_Vector2d$direction(firstVector),
				_opensolid$geometry$OpenSolid_Vector2d$direction(secondVector),
				_opensolid$geometry$OpenSolid_Vector2d$direction(thirdVector));
		},
		_opensolid$geometry$OpenSolid_Point2d$circumcenter(points));
};
var _opensolid$geometry$OpenSolid_Arc2d$fromEndpoints = function (_p9) {
	var _p10 = _p9;
	var _p15 = _p10.sweptAngle;
	var _p14 = _p10.startPoint;
	var _p13 = _p10.radius;
	var squaredRadius = _p13 * _p13;
	var chord = A2(_opensolid$geometry$OpenSolid_LineSegment2d$from, _p14, _p10.endPoint);
	var squaredHalfLength = _opensolid$geometry$OpenSolid_LineSegment2d$squaredLength(chord) / 4;
	return (_elm_lang$core$Native_Utils.cmp(squaredRadius, squaredHalfLength) > -1) ? A2(
		_elm_lang$core$Maybe$map,
		function (offsetDirection) {
			var halfLength = _elm_lang$core$Basics$sqrt(squaredHalfLength);
			var shortAngle = 2 * _elm_lang$core$Basics$asin(halfLength / _p13);
			var sweptAngleInRadians = function () {
				var _p11 = _p15;
				switch (_p11.ctor) {
					case 'SmallPositive':
						return shortAngle;
					case 'SmallNegative':
						return 0 - shortAngle;
					case 'LargePositive':
						return (2 * _elm_lang$core$Basics$pi) - shortAngle;
					default:
						return shortAngle - (2 * _elm_lang$core$Basics$pi);
				}
			}();
			var midpoint = _opensolid$geometry$OpenSolid_LineSegment2d$midpoint(chord);
			var offsetMagnitude = _elm_lang$core$Basics$sqrt(squaredRadius - squaredHalfLength);
			var offsetDistance = function () {
				var _p12 = _p15;
				switch (_p12.ctor) {
					case 'SmallPositive':
						return offsetMagnitude;
					case 'SmallNegative':
						return 0 - offsetMagnitude;
					case 'LargeNegative':
						return offsetMagnitude;
					default:
						return 0 - offsetMagnitude;
				}
			}();
			var offset = _opensolid$geometry$OpenSolid_Vector2d$with(
				{length: offsetDistance, direction: offsetDirection});
			var centerPoint = A2(_opensolid$geometry$OpenSolid_Point2d$translateBy, offset, midpoint);
			return _opensolid$geometry$OpenSolid_Arc2d$with(
				{centerPoint: centerPoint, startPoint: _p14, sweptAngle: sweptAngleInRadians});
		},
		_opensolid$geometry$OpenSolid_LineSegment2d$normalDirection(chord)) : _elm_lang$core$Maybe$Nothing;
};
var _opensolid$geometry$OpenSolid_Arc2d$reverse = function (arc) {
	return _opensolid$geometry$OpenSolid_Arc2d$with(
		{
			startPoint: _opensolid$geometry$OpenSolid_Arc2d$endPoint(arc),
			centerPoint: _opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc),
			sweptAngle: 0 - _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc)
		});
};
var _opensolid$geometry$OpenSolid_Arc2d$scaleAbout = F3(
	function (point, scale, arc) {
		var scalePoint = A2(_opensolid$geometry$OpenSolid_Point2d$scaleAbout, point, scale);
		return _opensolid$geometry$OpenSolid_Arc2d$with(
			{
				centerPoint: scalePoint(
					_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc)),
				startPoint: scalePoint(
					_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc)),
				sweptAngle: (_elm_lang$core$Native_Utils.cmp(scale, 0) > 0) ? _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc) : (0 - _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc))
			});
	});
var _opensolid$geometry$OpenSolid_Arc2d$rotateAround = F2(
	function (point, angle) {
		var rotatePoint = A2(_opensolid$geometry$OpenSolid_Point2d$rotateAround, point, angle);
		return function (arc) {
			return _opensolid$geometry$OpenSolid_Arc2d$with(
				{
					centerPoint: rotatePoint(
						_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc)),
					startPoint: rotatePoint(
						_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc)),
					sweptAngle: _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc)
				});
		};
	});
var _opensolid$geometry$OpenSolid_Arc2d$translateBy = F2(
	function (displacement, arc) {
		var translatePoint = _opensolid$geometry$OpenSolid_Point2d$translateBy(displacement);
		return _opensolid$geometry$OpenSolid_Arc2d$with(
			{
				centerPoint: translatePoint(
					_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc)),
				startPoint: translatePoint(
					_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc)),
				sweptAngle: _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc)
			});
	});
var _opensolid$geometry$OpenSolid_Arc2d$mirrorAcross = function (axis) {
	var mirrorPoint = _opensolid$geometry$OpenSolid_Point2d$mirrorAcross(axis);
	return function (arc) {
		return _opensolid$geometry$OpenSolid_Arc2d$with(
			{
				centerPoint: mirrorPoint(
					_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc)),
				startPoint: mirrorPoint(
					_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc)),
				sweptAngle: 0 - _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc)
			});
	};
};
var _opensolid$geometry$OpenSolid_Arc2d$relativeTo = F2(
	function (frame, arc) {
		var relativePoint = _opensolid$geometry$OpenSolid_Point2d$relativeTo(frame);
		return _opensolid$geometry$OpenSolid_Arc2d$with(
			{
				centerPoint: relativePoint(
					_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc)),
				startPoint: relativePoint(
					_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc)),
				sweptAngle: _opensolid$geometry$OpenSolid_Frame2d$isRightHanded(frame) ? _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc) : (0 - _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc))
			});
	});
var _opensolid$geometry$OpenSolid_Arc2d$placeIn = F2(
	function (frame, arc) {
		var placePoint = _opensolid$geometry$OpenSolid_Point2d$placeIn(frame);
		return _opensolid$geometry$OpenSolid_Arc2d$with(
			{
				centerPoint: placePoint(
					_opensolid$geometry$OpenSolid_Arc2d$centerPoint(arc)),
				startPoint: placePoint(
					_opensolid$geometry$OpenSolid_Arc2d$startPoint(arc)),
				sweptAngle: _opensolid$geometry$OpenSolid_Frame2d$isRightHanded(frame) ? _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc) : (0 - _opensolid$geometry$OpenSolid_Arc2d$sweptAngle(arc))
			});
	});
var _opensolid$geometry$OpenSolid_Arc2d$LargeNegative = {ctor: 'LargeNegative'};
var _opensolid$geometry$OpenSolid_Arc2d$largeNegative = _opensolid$geometry$OpenSolid_Arc2d$LargeNegative;
var _opensolid$geometry$OpenSolid_Arc2d$LargePositive = {ctor: 'LargePositive'};
var _opensolid$geometry$OpenSolid_Arc2d$largePositive = _opensolid$geometry$OpenSolid_Arc2d$LargePositive;
var _opensolid$geometry$OpenSolid_Arc2d$SmallNegative = {ctor: 'SmallNegative'};
var _opensolid$geometry$OpenSolid_Arc2d$smallNegative = _opensolid$geometry$OpenSolid_Arc2d$SmallNegative;
var _opensolid$geometry$OpenSolid_Arc2d$SmallPositive = {ctor: 'SmallPositive'};
var _opensolid$geometry$OpenSolid_Arc2d$smallPositive = _opensolid$geometry$OpenSolid_Arc2d$SmallPositive;

var _gampleman$elm_visualization$Visualization_Scale_Internal$toFixed = F2(
	function (precision, value) {
		var pad = function (num) {
			var _p0 = num;
			_v0_2:
			do {
				if (_p0.ctor === '::') {
					if (_p0._1.ctor === '::') {
						if (_p0._1._1.ctor === '[]') {
							return {
								ctor: '::',
								_0: _p0._0,
								_1: {
									ctor: '::',
									_0: A3(
										_elm_lang$core$String$padRight,
										precision,
										_elm_lang$core$Native_Utils.chr('0'),
										_p0._1._0),
									_1: {ctor: '[]'}
								}
							};
						} else {
							break _v0_2;
						}
					} else {
						var _p1 = _p0._0;
						return (_elm_lang$core$Native_Utils.cmp(precision, 0) > 0) ? {
							ctor: '::',
							_0: _p1,
							_1: {
								ctor: '::',
								_0: A3(
									_elm_lang$core$String$padRight,
									precision,
									_elm_lang$core$Native_Utils.chr('0'),
									''),
								_1: {ctor: '[]'}
							}
						} : {
							ctor: '::',
							_0: _p1,
							_1: {ctor: '[]'}
						};
					}
				} else {
					break _v0_2;
				}
			} while(false);
			return _p0;
		};
		var power = Math.pow(
			_elm_lang$core$Basics$toFloat(10),
			_elm_lang$core$Basics$toFloat(precision));
		return A2(
			_elm_lang$core$String$join,
			'.',
			pad(
				A2(
					_elm_lang$core$String$split,
					'.',
					_elm_lang$core$Basics$toString(
						_elm_lang$core$Basics$toFloat(
							_elm_lang$core$Basics$round(value * power)) / power))));
	});
var _gampleman$elm_visualization$Visualization_Scale_Internal$interpolateFloat = F3(
	function (from, to, time) {
		return from + ((to - from) * time);
	});
var _gampleman$elm_visualization$Visualization_Scale_Internal$bimap = F4(
	function (_p3, _p2, deinterpolate, reinterpolate) {
		var _p4 = _p3;
		var _p11 = _p4._1;
		var _p10 = _p4._0;
		var _p5 = _p2;
		var _p9 = _p5._1;
		var _p8 = _p5._0;
		var _p6 = (_elm_lang$core$Native_Utils.cmp(_p11, _p10) < 0) ? {
			ctor: '_Tuple2',
			_0: A2(deinterpolate, _p11, _p10),
			_1: A2(reinterpolate, _p9, _p8)
		} : {
			ctor: '_Tuple2',
			_0: A2(deinterpolate, _p10, _p11),
			_1: A2(reinterpolate, _p8, _p9)
		};
		var de = _p6._0;
		var re = _p6._1;
		return function (_p7) {
			return re(
				de(_p7));
		};
	});

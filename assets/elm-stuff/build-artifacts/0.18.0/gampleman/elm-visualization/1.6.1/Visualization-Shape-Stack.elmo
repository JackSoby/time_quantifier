var _gampleman$elm_visualization$Visualization_Shape_Stack$sortByInsideOut = F2(
	function (toNumber, items) {
		var folder = F2(
			function (_p1, _p0) {
				var _p2 = _p1;
				var _p9 = _p2._1;
				var _p8 = _p2._0;
				var _p3 = _p0;
				var _p7 = _p3._3;
				var _p6 = _p3._2;
				var _p5 = _p3._1;
				var _p4 = _p3._0;
				return (_elm_lang$core$Native_Utils.cmp(_p6, _p4) < 0) ? {
					ctor: '_Tuple4',
					_0: _p4,
					_1: _p5,
					_2: _p6 + _p9,
					_3: {ctor: '::', _0: _p8, _1: _p7}
				} : {
					ctor: '_Tuple4',
					_0: _p4 + _p9,
					_1: {ctor: '::', _0: _p8, _1: _p5},
					_2: _p6,
					_3: _p7
				};
			});
		var withSum = A2(
			_elm_lang$core$List$map,
			function (element) {
				return {
					ctor: '_Tuple2',
					_0: element,
					_1: toNumber(element)
				};
			},
			items);
		var _p10 = A3(
			_elm_lang$core$List$foldl,
			folder,
			{
				ctor: '_Tuple4',
				_0: 0,
				_1: {ctor: '[]'},
				_2: 0,
				_3: {ctor: '[]'}
			},
			A2(_elm_lang$core$List$sortBy, _elm_lang$core$Tuple$second, withSum));
		var bottom = _p10._1;
		var top = _p10._3;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$List$reverse(bottom),
			top);
	});
var _gampleman$elm_visualization$Visualization_Shape_Stack$pairwise = F2(
	function (f, list) {
		var _p11 = list;
		if (_p11.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return A3(_elm_lang$core$List$map2, f, list, _p11._1);
		}
	});
var _gampleman$elm_visualization$Visualization_Shape_Stack$offsetDiverging = function (series) {
	var _p12 = series;
	if (_p12.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var folder = F2(
			function (_p14, _p13) {
				var _p15 = _p14;
				var _p20 = _p15._1;
				var _p16 = _p13;
				var _p19 = _p16._0;
				var _p18 = _p16._1;
				var _p17 = _p16._2;
				var dy = _p20 - _p15._0;
				return (_elm_lang$core$Native_Utils.cmp(dy, 0) > -1) ? {
					ctor: '_Tuple3',
					_0: _p19 + dy,
					_1: _p18,
					_2: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p19, _1: _p19 + dy},
						_1: _p17
					}
				} : ((_elm_lang$core$Native_Utils.cmp(dy, 0) < 0) ? {
					ctor: '_Tuple3',
					_0: _p19,
					_1: _p18 + dy,
					_2: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p18 + dy, _1: _p18},
						_1: _p17
					}
				} : {
					ctor: '_Tuple3',
					_0: _p19,
					_1: _p18,
					_2: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p19, _1: _p20},
						_1: _p17
					}
				});
			});
		var modifyColumn = function (column) {
			return _elm_lang$core$List$reverse(
				function (_p21) {
					var _p22 = _p21;
					return _p22._2;
				}(
					A3(
						_elm_lang$core$List$foldl,
						folder,
						{
							ctor: '_Tuple3',
							_0: 0,
							_1: 0,
							_2: {ctor: '[]'}
						},
						column)));
		};
		return _elm_community$list_extra$List_Extra$transpose(
			A2(
				_elm_lang$core$List$map,
				modifyColumn,
				_elm_community$list_extra$List_Extra$transpose(series)));
	}
};
var _gampleman$elm_visualization$Visualization_Shape_Stack$offsetNone = function (series) {
	var _p23 = series;
	if (_p23.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var weirdAdd = F2(
			function (_p25, _p24) {
				var _p26 = _p25;
				var _p30 = _p26._1;
				var _p27 = _p24;
				var _p29 = _p27._1;
				var _p28 = _p27._0;
				return _elm_lang$core$Basics$isNaN(_p29) ? {ctor: '_Tuple2', _0: _p28, _1: _p30 + _p28} : {ctor: '_Tuple2', _0: _p29, _1: _p30 + _p29};
			});
		var helper = F2(
			function (s1, _p31) {
				var _p32 = _p31;
				var _p33 = _p32._0;
				return {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$List$map2, weirdAdd, s1, _p33),
					_1: {ctor: '::', _0: _p33, _1: _p32._1}
				};
			});
		return _elm_lang$core$List$reverse(
			A2(
				_elm_lang$core$Basics$uncurry,
				F2(
					function (x, y) {
						return {ctor: '::', _0: x, _1: y};
					}),
				A3(
					_elm_lang$core$List$foldl,
					helper,
					{
						ctor: '_Tuple2',
						_0: _p23._0,
						_1: {ctor: '[]'}
					},
					_p23._1)));
	}
};
var _gampleman$elm_visualization$Visualization_Shape_Stack$offsetExpand = function (series) {
	var normalizeColumn = function (column) {
		var deltas = A2(
			_elm_lang$core$List$map,
			function (_p34) {
				return _elm_lang$core$Basics$abs(
					A2(
						_elm_lang$core$Basics$uncurry,
						F2(
							function (x, y) {
								return x - y;
							}),
						_p34));
			},
			column);
		var total = _elm_lang$core$List$sum(deltas);
		return A2(
			_elm_lang$core$List$map,
			function (value) {
				return {ctor: '_Tuple2', _0: 0, _1: value / total};
			},
			deltas);
	};
	return _gampleman$elm_visualization$Visualization_Shape_Stack$offsetNone(
		_elm_community$list_extra$List_Extra$transpose(
			A2(
				_elm_lang$core$List$map,
				normalizeColumn,
				_elm_community$list_extra$List_Extra$transpose(series))));
};
var _gampleman$elm_visualization$Visualization_Shape_Stack$offsetSilhouette = function (series) {
	var _p35 = series;
	if (_p35.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var ys = A2(
			_elm_lang$core$List$map,
			function (_p36) {
				return _elm_lang$core$List$sum(
					A2(_elm_lang$core$List$map, _elm_lang$core$Tuple$second, _p36));
			},
			_elm_community$list_extra$List_Extra$transpose(series));
		return _gampleman$elm_visualization$Visualization_Shape_Stack$offsetNone(
			{
				ctor: '::',
				_0: A3(
					_elm_lang$core$List$map2,
					F2(
						function (_p37, newY) {
							var _p38 = _p37;
							return {ctor: '_Tuple2', _0: (0 - newY) / 2, _1: _p38._1 + ((0 - newY) / 2)};
						}),
					_p35._0,
					ys),
				_1: _p35._1
			});
	}
};
var _gampleman$elm_visualization$Visualization_Shape_Stack$offsetWiggle = function (series) {
	var _p39 = series;
	if (_p39.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		var safeDivision = F2(
			function (a, b) {
				return _elm_lang$core$Native_Utils.eq(b, 0) ? 0 : (a / b);
			});
		var scanner = F2(
			function (_p40, yValue) {
				var _p41 = _p40;
				return yValue - A2(safeDivision, _p41._1, _p41._0);
			});
		var folder = F2(
			function (_p43, _p42) {
				var _p44 = _p43;
				var _p47 = _p44._1;
				var _p45 = _p42;
				var _p46 = _p45._0;
				var delta = _p47 - _p44._0;
				return {ctor: '_Tuple2', _0: delta + _p46, _1: ((_p46 + (delta / 2)) * _p47) + _p45._1};
			});
		var deltaFractions = F2(
			function (previous, current) {
				return _elm_lang$core$Tuple$second(
					A3(
						_elm_lang$core$List$foldl,
						folder,
						{ctor: '_Tuple2', _0: 0, _1: 0},
						A3(
							_elm_lang$core$List$map2,
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								}),
							previous,
							current)));
			});
		var columns = _elm_community$list_extra$List_Extra$transpose(
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$List$map(_elm_lang$core$Tuple$second),
				series));
		var newFirst = A3(
			_elm_lang$core$List$map2,
			F2(
				function (_p48, yValue) {
					var _p49 = _p48;
					return {ctor: '_Tuple2', _0: yValue, _1: _p49._1 + yValue};
				}),
			_p39._0,
			A3(
				_elm_lang$core$List$scanl,
				scanner,
				0,
				A3(
					_elm_lang$core$List$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$List$sum,
						A2(_elm_lang$core$List$drop, 1, columns)),
					A2(_gampleman$elm_visualization$Visualization_Shape_Stack$pairwise, deltaFractions, columns))));
		return _gampleman$elm_visualization$Visualization_Shape_Stack$offsetNone(
			{ctor: '::', _0: newFirst, _1: _p39._1});
	}
};
var _gampleman$elm_visualization$Visualization_Shape_Stack$calculateExtremes = function (coords) {
	var folder = F2(
		function (_p51, _p50) {
			var _p52 = _p51;
			var _p55 = _p52._1;
			var _p54 = _p52._0;
			var _p53 = _p50;
			return {
				ctor: '_Tuple2',
				_0: A2(
					_elm_lang$core$Basics$min,
					_p53._0,
					A2(_elm_lang$core$Basics$min, _p54, _p55)),
				_1: A2(
					_elm_lang$core$Basics$max,
					_p53._1,
					A2(_elm_lang$core$Basics$max, _p54, _p55))
			};
		});
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p57, _p56) {
				var _p58 = _p57;
				var _p59 = _p56;
				return {
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$Basics$min, _p58._0, _p59._0),
					_1: A2(_elm_lang$core$Basics$max, _p58._1, _p59._1)
				};
			}),
		{ctor: '_Tuple2', _0: 0, _1: 0},
		A2(
			_elm_lang$core$List$map,
			A2(
				_elm_lang$core$List$foldl,
				folder,
				{ctor: '_Tuple2', _0: 0, _1: 0}),
			coords));
};
var _gampleman$elm_visualization$Visualization_Shape_Stack$computeStack = function (_p60) {
	var _p61 = _p60;
	var _p62 = _elm_lang$core$List$unzip(
		_p61.order(_p61.data));
	var labels = _p62._0;
	var values = _p62._1;
	var stacked = _p61.offset(
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$List$map(
				function (e) {
					return {ctor: '_Tuple2', _0: 0, _1: e};
				}),
			values));
	return {
		values: stacked,
		labels: labels,
		extent: _gampleman$elm_visualization$Visualization_Shape_Stack$calculateExtremes(stacked)
	};
};

var _gampleman$elm_visualization$Visualization_Path_Conversion$finalize = F2(
	function (subPath, path) {
		var _p0 = _folkertdev$one_true_path_experiment$SubPath$unwrap(subPath);
		if (_p0.ctor === 'Just') {
			var _p1 = _p0._0.moveto;
			var start = _p1._0;
			var _p2 = _elm_community$list_extra$List_Extra$last(_p0._0.drawtos);
			if ((_p2.ctor === 'Just') && (_p2._0.ctor === 'ClosePath')) {
				return {
					ctor: '::',
					_0: _gampleman$elm_visualization$Visualization_Path$Move(start),
					_1: _gampleman$elm_visualization$Visualization_Path$close(path)
				};
			} else {
				return {
					ctor: '::',
					_0: _gampleman$elm_visualization$Visualization_Path$Move(start),
					_1: path
				};
			}
		} else {
			return {ctor: '[]'};
		}
	});
var _gampleman$elm_visualization$Visualization_Path_Conversion$convertSegment = function (segment) {
	var _p3 = segment;
	switch (_p3.ctor) {
		case 'LineSegment':
			return _gampleman$elm_visualization$Visualization_Path$Line(
				_opensolid$geometry$OpenSolid_Point2d$coordinates(
					_opensolid$geometry$OpenSolid_LineSegment2d$endPoint(_p3._0)));
		case 'Quadratic':
			var _p4 = _opensolid$geometry$OpenSolid_QuadraticSpline2d$controlPoints(_p3._0);
			var start = _p4._0;
			var c1 = _p4._1;
			var end = _p4._2;
			return A2(
				_gampleman$elm_visualization$Visualization_Path$QuadraticCurve,
				_opensolid$geometry$OpenSolid_Point2d$coordinates(c1),
				_opensolid$geometry$OpenSolid_Point2d$coordinates(end));
		case 'Cubic':
			var _p5 = _opensolid$geometry$OpenSolid_CubicSpline2d$controlPoints(_p3._0);
			var start = _p5._0;
			var c1 = _p5._1;
			var c2 = _p5._2;
			var end = _p5._3;
			return A3(
				_gampleman$elm_visualization$Visualization_Path$BezierCurve,
				_opensolid$geometry$OpenSolid_Point2d$coordinates(c1),
				_opensolid$geometry$OpenSolid_Point2d$coordinates(c2),
				_opensolid$geometry$OpenSolid_Point2d$coordinates(end));
		default:
			var _p8 = _p3._0.start;
			var _p7 = _p3._0.radii;
			var _p6 = _p3._0.end;
			var anticlockwise = !_elm_lang$core$Native_Utils.eq(_p3._0.direction, _folkertdev$one_true_path_experiment$LowLevel_Command$counterClockwise);
			var r = _elm_lang$core$Tuple$first(_p7);
			var center = A2(
				_Zinggi$elm_webgl_math$Vector2$add,
				_p8,
				A2(
					_Zinggi$elm_webgl_math$Vector2$divideBy,
					2,
					A2(_Zinggi$elm_webgl_math$Vector2$sub, _p6, _p8)));
			var startAngle = A2(_Zinggi$elm_webgl_math$Vector2$angle, _p8, center);
			var endAngle = A2(_Zinggi$elm_webgl_math$Vector2$angle, _p6, center);
			return _elm_lang$core$Native_Utils.eq(
				_elm_lang$core$Tuple$first(_p7),
				_elm_lang$core$Tuple$second(_p7)) ? A5(_gampleman$elm_visualization$Visualization_Path$ArcCustom, center, r, startAngle, endAngle, anticlockwise) : A2(
				_elm_lang$core$Debug$log,
				'Unequal radii are not supported',
				A5(_gampleman$elm_visualization$Visualization_Path$ArcCustom, center, r, startAngle, endAngle, anticlockwise));
	}
};
var _gampleman$elm_visualization$Visualization_Path_Conversion$subpathToVizPath = function (subPath) {
	return A2(
		_gampleman$elm_visualization$Visualization_Path_Conversion$finalize,
		subPath,
		A2(
			_elm_lang$core$List$map,
			_gampleman$elm_visualization$Visualization_Path_Conversion$convertSegment,
			_folkertdev$one_true_path_experiment$SubPath$toSegments(subPath)));
};

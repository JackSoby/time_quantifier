var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$padding = 50;
var _user$project$Main$h = 450;
var _user$project$Main$yScale = A2(
	_gampleman$elm_visualization$Visualization_Scale$linear,
	{ctor: '_Tuple2', _0: 0, _1: 24},
	{ctor: '_Tuple2', _0: _user$project$Main$h - (2 * _user$project$Main$padding), _1: 0});
var _user$project$Main$yAxis = A2(
	_gampleman$elm_visualization$Visualization_Axis$axis,
	_elm_lang$core$Native_Utils.update(
		_gampleman$elm_visualization$Visualization_Axis$defaultOptions,
		{orientation: _gampleman$elm_visualization$Visualization_Axis$Left, tickCount: 24}),
	_user$project$Main$yScale);
var _user$project$Main$column = F2(
	function (xScale, _p0) {
		var _p1 = _p0;
		var _p3 = _p1._1;
		var _p2 = _p1._0;
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$class('column'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$rect,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x(
							_elm_lang$core$Basics$toString(
								A2(_gampleman$elm_visualization$Visualization_Scale$convert, xScale, _p2))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y(
								_elm_lang$core$Basics$toString(
									A2(_gampleman$elm_visualization$Visualization_Scale$convert, _user$project$Main$yScale, _p3))),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width(
									_elm_lang$core$Basics$toString(
										_gampleman$elm_visualization$Visualization_Scale$bandwidth(xScale))),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height(
										_elm_lang$core$Basics$toString(
											(_user$project$Main$h - A2(_gampleman$elm_visualization$Visualization_Scale$convert, _user$project$Main$yScale, _p3)) - (2 * _user$project$Main$padding))),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$text_,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x(
								_elm_lang$core$Basics$toString(
									A2(
										_gampleman$elm_visualization$Visualization_Scale$convert,
										_gampleman$elm_visualization$Visualization_Scale$toRenderable(xScale),
										_p2))),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y(
									_elm_lang$core$Basics$toString(
										A2(_gampleman$elm_visualization$Visualization_Scale$convert, _user$project$Main$yScale, _p3) - 5)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$textAnchor('middle'),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg$text(
								_elm_lang$core$Basics$toString(_p3)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Main$w = 900;
var _user$project$Main$xScale = function (day) {
	return A3(
		_gampleman$elm_visualization$Visualization_Scale$band,
		_elm_lang$core$Native_Utils.update(
			_gampleman$elm_visualization$Visualization_Scale$defaultBandConfig,
			{paddingInner: 0.1, paddingOuter: 0.2}),
		A2(
			_elm_lang$core$List$map,
			function (day1) {
				return _elm_lang$core$Tuple$first(day1.position);
			},
			day),
		{ctor: '_Tuple2', _0: 0, _1: _user$project$Main$w - (2 * _user$project$Main$padding)});
};
var _user$project$Main$xAxis = function (model) {
	return A2(
		_gampleman$elm_visualization$Visualization_Axis$axis,
		_elm_lang$core$Native_Utils.update(
			_gampleman$elm_visualization$Visualization_Axis$defaultOptions,
			{orientation: _gampleman$elm_visualization$Visualization_Axis$Bottom, tickCount: 10}),
		_gampleman$elm_visualization$Visualization_Scale$toRenderable(
			_user$project$Main$xScale(model)));
};
var _user$project$Main$svgView = function (days) {
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$width(
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_user$project$Main$w),
					'px')),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$height(
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_user$project$Main$h),
						'px')),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$style,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg$text('\n            .column rect { fill: rgba(1, 214, 78, 0.8); }\n            .column text { display: none; }\n            .column:hover rect { fill: rgb(118, 214, 78); }\n            .column:hover text { display: inline; }\n          '),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$g,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$transform(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'translate(',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_user$project$Main$padding - 1),
									A2(
										_elm_lang$core$Basics_ops['++'],
										', ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(_user$project$Main$h - _user$project$Main$padding),
											')'))))),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _user$project$Main$xAxis(days),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$g,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$transform(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'translate(',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(_user$project$Main$padding - 1),
										A2(
											_elm_lang$core$Basics_ops['++'],
											', ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_user$project$Main$padding),
												')'))))),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _user$project$Main$yAxis,
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$g,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$transform(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'translate(',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(_user$project$Main$padding),
											A2(
												_elm_lang$core$Basics_ops['++'],
												', ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(_user$project$Main$padding),
													')'))))),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$class('series'),
									_1: {ctor: '[]'}
								}
							},
							A2(
								_elm_lang$core$List$map,
								function (day) {
									return A2(
										_user$project$Main$column,
										_user$project$Main$xScale(days),
										day.position);
								},
								days)),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$Main$svgView(model.days),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$matchers = _evancz$url_parser$UrlParser$oneOf(
	{ctor: '[]'});
var _user$project$Main$Day = F2(
	function (a, b) {
		return {name: a, position: b};
	});
var _user$project$Main$Model = function (a) {
	return {days: a};
};
var _user$project$Main$ProductsRoute = function (a) {
	return {ctor: 'ProductsRoute', _0: a};
};
var _user$project$Main$SubCategoriesRoute = function (a) {
	return {ctor: 'SubCategoriesRoute', _0: a};
};
var _user$project$Main$NotFoundRoute = {ctor: 'NotFoundRoute'};
var _user$project$Main$parseLocation = function (location) {
	var _p4 = A2(_evancz$url_parser$UrlParser$parseHash, _user$project$Main$matchers, location);
	if (_p4.ctor === 'Just') {
		return _p4._0;
	} else {
		return _user$project$Main$NotFoundRoute;
	}
};
var _user$project$Main$init = function (location) {
	var currentRoute = _user$project$Main$parseLocation(location);
	return {
		ctor: '_Tuple2',
		_0: _user$project$Main$Model(
			{
				ctor: '::',
				_0: {
					name: 'monday',
					position: {ctor: '_Tuple2', _0: 1, _1: 24}
				},
				_1: {
					ctor: '::',
					_0: {
						name: 'tuesday',
						position: {ctor: '_Tuple2', _0: 2, _1: 5}
					},
					_1: {
						ctor: '::',
						_0: {
							name: 'wednesday',
							position: {ctor: '_Tuple2', _0: 3, _1: 5}
						},
						_1: {
							ctor: '::',
							_0: {
								name: 'thursday',
								position: {ctor: '_Tuple2', _0: 4, _1: 24}
							},
							_1: {
								ctor: '::',
								_0: {
									name: 'friday',
									position: {ctor: '_Tuple2', _0: 5, _1: 5}
								},
								_1: {
									ctor: '::',
									_0: {
										name: 'satruday',
										position: {ctor: '_Tuple2', _0: 6, _1: 5}
									},
									_1: {
										ctor: '::',
										_0: {
											name: 'sunday',
											position: {ctor: '_Tuple2', _0: 7, _1: 5}
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}),
		_1: _elm_lang$core$Platform_Cmd$none
	};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p5 = msg;
		if (_p5.ctor === 'Load') {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			var newRoute = _user$project$Main$parseLocation(_p5._0);
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$ParentCategoriesRoute = {ctor: 'ParentCategoriesRoute'};
var _user$project$Main$OnLocationChange = function (a) {
	return {ctor: 'OnLocationChange', _0: a};
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_user$project$Main$OnLocationChange,
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
var _user$project$Main$Load = {ctor: 'Load'};
